shell_command(
  name="bazel-cpp-binary",
  command="pwd && bazel build --verbose_failures //... && cp -f ../bazel-bin/cpp/hello_cpp {chroot}/cpp/.",
  tools=["bazel", "gcc", "cp", "ls", "as", "bash", "touch", "which", "ld", "g++", "cat", "rm", "mkdir", "env", "ln", "find", "mktemp", "sed"],
  log_output=True,
  extra_env_vars=["HOME", "PATH"],
  output_files=["hello_cpp"],
  environment="workspace",
  workspace_invalidation_sources=["hello_cpp.cc"],
)

experimental_test_shell_command(
    name="bazel-cpp-binary-test",
    tools=["test", "ls"],
    command="ls -R {chroot} && test -r {chroot}/cpp/hello_cpp",
    execution_dependencies=[":bazel-cpp-binary"],
)

# PROBLEM: using :hello_cpp_as_resource as dependency of python_test does NOT bring hello_cpp into the sandbox!
experimental_wrap_as_resources(
    name="hello_cpp_as_resource",
    inputs=[":bazel-cpp-binary"],
    outputs=["hello_cpp"],
)

python_test(
    name="bazel_output_from_python_test",
    source="bazel_output_from_python_test.py",
    dependencies=[
        ":bazel-cpp-binary",
    ],
)

experimental_workspace_environment(
  name="workspace-cpp",
)
